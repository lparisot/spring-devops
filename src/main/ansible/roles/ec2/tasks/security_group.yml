---
- name: get my public IP
  ipify_facts:
    validate_certs: no
  register: myip
  when: group == "database" and open_3306_for_me
  tags: [ 'ec2' ]

# security_rules is read only
- name: use local security rules
  set_fact:
    local_security_rules: "{{ security_rules }}"

- name: update security rules if we need to open 3306 for us
  set_fact:
    local_security_rules: "{{ local_security_rules | default([]) }} + [{ 'proto': 'tcp', 'from_port': 3306, 'to_port': 3306, 'cidr_ip': '{{ myip.ansible_facts.ipify_public_ip }}/32' }]"
  when: group == "database" and open_3306_for_me
  tags: [ 'ec2' ]

- name: update security rules to open 3306 to all webservers
  set_fact:
    local_security_rules: "{{ local_security_rules | default([]) }} + [{ 'proto': 'tcp', 'from_port': 3306, 'to_port': 3306, 'cidr_ip': '{{ item.private_ip_address }}/32' }]"
  with_items: "{{ ec2_instances_running['webserver'] }}"
  when: group == "database" and ec2_instances_running['webserver'] is defined
  tags: [ 'ec2' ]


- name: create security group
  ec2_group:
    name: "{{ project_name }}_{{ item.name }}_security_group"
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    description: "{{ project_name }} {{ item.description }}"
    vpc_id: "{{ item.vpc_id }}"
    region: "{{ item.region }}"
    purge_rules: true
    rules: "{{ local_security_rules }}"
  with_items: "{{ ec2_groups }}"
  register: ec2_security_groups_temp
  tags: [ 'ec2' ]

- name: store result in ec2_security_groups
  set_fact:
    ec2_security_groups: "{{ ec2_security_groups | combine({group: ec2_security_groups_temp.results[0]}) }}"
  tags: [ 'ec2' ]