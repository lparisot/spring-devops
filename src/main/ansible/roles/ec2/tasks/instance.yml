---
- name: create an EC2 key
  ec2_key:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    name: "{{ ec2_my_key }}"
    # Region eu-west-3 does not seem to be available for aws module boto.ec2.
    #region: "{{ ec2_region }}"
    ec2_url: "https://ec2.{{ ec2_region }}.amazonaws.com"
  register: ec2_key
  tags: [ 'ec2' ]

- name: save private key
  become: yes
  become_user: "{{ local_user }}"
  copy: content="{{ ec2_key.key.private_key }}" dest="{{ ssh_dir }}/{{ project_name }}-{{ env }}-private.pem" mode=0600
  when: ec2_key.changed
  tags: [ 'ec2' ]

- name: create EC2 instance
  ec2:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    key_name: "{{ ec2_my_key }}"
    group_id: "{{ ec2_security_groups[group].group_id }}"
    # Region eu-west-3 does not seem to be available for aws module boto.ec2.
    #region: "{{ ec2_region }}"
    ec2_url: "https://ec2.{{ ec2_region }}.amazonaws.com"
    image: "{{ ec2_image }}"
    instance_type: "{{ ec2_instance_type }}"
    assign_public_ip: yes
    wait: yes
    volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: "{{ ec2_volume_size }}"
    vpc_subnet_id: "{{ ec2_subnet }}"
    instance_tags:
      name: "{{ item }}"
      type: "{{ group }}"
      env: "{{ env }}"
    count_tag:
      name: "{{ item }}"
    exact_count: 1
  with_items: "{{ groups[group] }}"
  tags: [ 'ec2' ]

- name: get facts for new instances
  ec2_instance_facts:
    aws_access_key: "{{ ec2_access_key }}"
    aws_secret_key: "{{ ec2_secret_key }}"
    region: "{{ ec2_region }}"
    filters:
      "tag:type": "{{ group }}"
  register: ec2_group_instances
  tags: [ 'ec2' ]

- name: store new running instances results
  set_fact:
    ec2_instances_running: "{{ ec2_instances_running | combine({group: ec2_group_instances.instances | selectattr('state.name', 'equalto', 'running') | list}) }}"
  tags: [ 'ec2' ]

- name: save config to inventory file
  become: yes
  become_user: "{{ local_user }}"
  template:
    src: config.j2
    dest: env/config
    mode: 0600
  tags: [ 'ec2' ]

- name: read current config file
  shell: cat "{{ ssh_config_dir_target }}"
  register: current_config_content
  tags: [ 'ec2' ]

- name: read new config file
  set_fact:
    new_content: "{{ lookup('file', './env/config') }}"
  tags: [ 'ec2' ]

- name: concatenate in current config file
  lineinfile: dest="{{ ssh_config_dir_target }}" line="\n{{ new_content }}"
  when: current_config_content.stdout.find(item) == -1
  with_items: "{{ groups[group] }}"
  tags: [ 'ec2' ]

- name: save config to inventory file
  become: yes
  become_user: "{{ local_user }}"
  replace:
    path: "{{ ssh_config_dir_target }}"
    regexp: "^Host {{item}}[^<]*?null$"
    replace: "{{ new_content }}"
  with_items: "{{ groups[group] }}"
  tags: [ 'ec2' ]

- name: wait for ssh to come up
  wait_for:
    host: "{{ item.public_ip_address }}"
    port: 22
    state: started
  with_items: "{{ ec2_instances_running[group] }}"
  tags: [ 'ec2' ]
