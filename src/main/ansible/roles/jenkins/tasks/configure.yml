---
- name: lock access to port 8080 to localhost
  lineinfile:
    dest: /etc/sysconfig/jenkins
    regexp: "^JENKINS_LISTEN_ADDRESS="
    line: 'JENKINS_LISTEN_ADDRESS="127.0.0.1"'
    state: present
  notify: restart jenkins
  tags: [ 'config' ]

- name: ensure jenkins is started
  service: name=jenkins state=started enabled=yes
  tags: [ 'service' ]

#- name: configure default users
#  template:
#    src:

# will create a public key under /var/lib/jenkins/.ssh
- name: generate SSH key for jenkins
  user:
    name: jenkins
    generate_ssh_key: yes
    ssh_key_bits: 2048
    ssh_key_comment: "jenkins@example.com"
    ssh_key_file: ".ssh/{{ jenkins_key }}"

- name: get jenkins config file
  shell: cat /etc/sysconfig/jenkins | grep ^JENKINS_HOME | cut -d "=" -f 2 | sed -e 's/\"//g'
  register: jenkins_config
- set_fact:
    jenkins_home: "{{ jenkins_config.stdout }}"

- name: get public SSH key
  fetch:
    src: "{{ jenkins_home }}/.ssh/{{ jenkins_key }}.pub"
    dest: "./env/{{ jenkins_key }}.pub"
    flat: yes

- name: Set Jenkins JAVA_ARGS
  lineinfile:
    dest: /etc/sysconfig/jenkins
    regexp: "^JENKINS_JAVA_OPTIONS.*"
    line: "JENKINS_JAVA_OPTIONS=\"{{ jenkins_java_args }}\""
  register: jenkins_java_args_change

- name: Remove initial Jenkins password
  file: name="{{ jenkins_home }}/secrets/initialAdminPassword" state=absent

- name: Create Jenkins admin password hash
  shell: echo -n "{{ jenkins_admin_password }}{ansible_jenkins}" | sha256sum - | awk '{ print $1; }'
  register: jenkins_password_hash

- name: Create admin user directory
  file:
    path: "{{ jenkins_home }}/users/admin"
    owner: jenkins
    group: jenkins
    mode: 0755
    state: directory
    recurse: yes

- name: Create admin
  template:
    src: admin-config.xml.j2
    dest: "{{ jenkins_home }}/users/admin/config.xml"
    force: yes
  register: jenkins_admin_config_change

- name: Create config
  copy:
    src: config.xml
    dest: "{{ jenkins_home }}/config.xml"
  register: jenkins_config_change

- name: Create /var/lib/jenkins/secrets
  file:
    path: "{{ jenkins_home }}/secrets"
    owner: jenkins
    group: jenkins
    mode: 0700
    state: directory
    recurse: yes

- name: Enable master to slave access control
  copy:
    content: "false"
    dest: "{{ jenkins_home }}/secrets/slave-to-master-security-kill-switch"

- name: Add hudson task maven
  template:
    src: hudson.tasks.Maven.xml.j2
    dest: "{{ jenkins_home }}/hudson.tasks.Maven.xml"
    owner: jenkins
    group: jenkins
    mode: 0644
  register: jenkins_maven_change

- name: Create global maven config
  copy:
    src: jenkins.mvn.GlobalMavenConfig.xml
    dest: "{{ jenkins_home }}/jenkins.mvn.GlobalMavenConfig.xml"
    owner: jenkins
    group: jenkins
    mode: 0644
  register: jenkins_global_maven_change

# Restart with a task instead of a handler, since we need those changes to
# be applied right away so that we can use the admin password in API calls.
- name: Restart Jenkins if necessary
  service: name=jenkins state=restarted
  when: jenkins_java_args_change|changed or jenkins_admin_config_change|changed or jenkins_config_change|changed or jenkins_maven_change|changed or jenkins_global_maven_change|changed

- name: Wait for Jenkins to become available
  wait_for: port=8080

- name: Get Jenkins crumb
  uri:
    user: admin
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/crumbIssuer/api/json"
    return_content: yes
  register: jenkins_crumb
  until: jenkins_crumb.content.find('Please wait while Jenkins is getting ready to work') == -1
  retries: 10
  delay: 5

- name: Set crumb token
  set_fact:
    jenkins_crumb_token: "{{ jenkins_crumb.json.crumbRequestField }}={{ jenkins_crumb.json.crumb }}"

- debug: msg="jenkins_crumb_token={{ jenkins_crumb_token }}"

- name: Get installed plugins
  uri:
    user: admin
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/pluginManager/api/json?tree=plugins[shortName]&{{ jenkins_crumb_token }}"
    return_content: yes
  register: jenkins_installed_plugins

- name: Install plugins
  uri:
    user: admin
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/pluginManager/install?plugin.{{ item }}.default=on&{{ jenkins_crumb_token }}"
    method: POST
    status_code: [200, 302]
  when: item not in jenkins_installed_plugins.json.plugins|map(attribute='shortName')|list
  with_items: "{{ jenkins_plugins }}"

- name: Wait for plugins to be installed
  uri:
    user: admin
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/updateCenter/installStatus?{{ jenkins_crumb_token }}"
    return_content: yes
  register: jenkins_plugin_status
  until: "'Pending' not in jenkins_plugin_status.json.data.jobs|map(attribute='installStatus')"
  retries: 60
  delay: 10

- name: Check if we need to restart Jenkins to activate plugins
  uri:
    user: admin
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/updateCenter/api/json\
    ?tree=restartRequiredForCompletion&{{ jenkins_crumb_token }}"
    return_content: yes
  register: jenkins_restart_required

- name: Restart Jenkins to activate new plugins
  service: name=jenkins state=restarted
  when: jenkins_restart_required.json.restartRequiredForCompletion|bool

- name: Wait for Jenkins to become available
  wait_for: port=8080

- name: Get Jenkins crumb
  uri:
    user: admin
    password: "{{ jenkins_admin_password }}"
    force_basic_auth: yes
    url: "http://127.0.0.1:8080/crumbIssuer/api/json"
    return_content: yes
  register: jenkins_crumb
  until: jenkins_crumb.content.find('Please wait while Jenkins is getting ready to work') == -1
  retries: 10
  delay: 5